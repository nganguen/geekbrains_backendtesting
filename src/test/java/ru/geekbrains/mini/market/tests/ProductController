@PostMapping
    @ApiOperation("Creates a new product. If id != null, then throw bad request response")
    public ResponseEntity<?> createNewProduct(@RequestBody ProductDto p) {
        if (p.getId() != null) {
            return new ResponseEntity<>(new MarketError(HttpStatus.BAD_REQUEST.value(), "Id must be null for new entity"), HttpStatus.BAD_REQUEST);
        }
        if ((p.getTitle() == null) | (p.getPrice() == 0) | (p.getCategoryTitle() == null) |
                (p.getCategoryTitle() == null) | (categoryService.findByTitle(p.getCategoryTitle()).isEmpty())) {
            return new ResponseEntity<>(new MarketError((HttpStatus.BAD_REQUEST.value()), "Bad request data"), HttpStatus.BAD_REQUEST);
        }
        return new ResponseEntity<>(new ProductDto(productService.save(p)), HttpStatus.CREATED);
    }

    @PutMapping
    @ApiOperation("Modify product")
    public ResponseEntity<?> modifyProduct(@RequestBody ProductDto p) {
        if (p.getId() == null) {
            return new ResponseEntity<>(new MarketError(HttpStatus.BAD_REQUEST.value(), "Id must be not null for new entity"), HttpStatus.BAD_REQUEST);
        }
        if (!productService.existsById(p.getId())) {
            return new ResponseEntity<>(new MarketError(HttpStatus.BAD_REQUEST.value(), "Product with id: " + p.getId() + " doesn't exist"), HttpStatus.BAD_REQUEST);
        }
        if ((p.getTitle() == null) | (p.getPrice() == 0) | (p.getCategoryTitle() == null) |
                (p.getCategoryTitle() == null) | (categoryService.findByTitle(p.getCategoryTitle()).isEmpty())) {
            return new ResponseEntity<>(new MarketError((HttpStatus.BAD_REQUEST.value()), "Bad request data"), HttpStatus.BAD_REQUEST);
        }
        return new ResponseEntity<>(new ProductDto(productService.save(p)), HttpStatus.OK);
    }

    @DeleteMapping("/{id}")
    @ApiOperation("Delete product")
    public ResponseEntity<?> deleteById(@ApiParam("Id of the product") @PathVariable Long id) {
        if (!productService.existsById(id)) {
            return new ResponseEntity<>(new MarketError(HttpStatus.BAD_REQUEST.value(), "Product with id: " + id + " doesn't exist"), HttpStatus.BAD_REQUEST);
        }
        productService.deleteById(id);
        return new ResponseEntity<>(HttpStatus.OK);
    }